{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# Load the data\ntrain = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')\ntest = pd.read_csv('/kaggle/input/digit-recognizer/test.csv')\n\n# Prepare the data\ny_train = train[\"label\"]\nX_train = train.drop(labels=[\"label\"], axis=1)\n\n# Normalize the data\nX_train = X_train / 255.0\ntest = test / 255.0\n\n# Reshape image in 3 dimensions (height = 28px, width = 28px, channel = 1)\nX_train = X_train.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28, 28, 1)\n\n# Encode labels to one hot vectors\ny_train = to_categorical(y_train, num_classes=10)\n\n# Split training and validation set\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=42)\n\n# Build the CNN model\nmodel = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), padding='Same', activation='relu', input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), padding='Same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='Same', activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='Same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation=\"softmax\"))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Set up learning rate reduction and early stopping\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                           patience=3, \n                                           verbose=1, \n                                           factor=0.5, \n                                           min_lr=0.00001)\n\nearly_stopping = EarlyStopping(monitor='val_loss', patience=10, verbose=1, restore_best_weights=True)\n\n# Data augmentation to prevent overfitting\ndatagen = ImageDataGenerator(\n        rotation_range=10,\n        zoom_range=0.1,\n        width_shift_range=0.1,\n        height_shift_range=0.1)\n\ndatagen.fit(X_train)\n\n# Train the model\nhistory = model.fit(datagen.flow(X_train, y_train, batch_size=86),\n                    epochs=50,\n                    validation_data=(X_val, y_val),\n                    verbose=1,\n                    callbacks=[learning_rate_reduction, early_stopping])\n\n# Plot training history\nplt.figure(figsize=(12, 4))\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'], label='Training Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.title('Accuracy')\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.title('Loss')\nplt.legend()\nplt.show()\n\n# Predict results\nresults = model.predict(test)\nresults = np.argmax(results, axis=1)\nresults = pd.Series(results, name=\"Label\")\nmodel.save('digit_recognizer.h5') \n# Create submission file - FINAL CORRECTED VERSION\nsubmission = pd.concat([\n    pd.Series(range(1, len(results)+1), name=\"ImageId\"), \n    results\n], axis=1)\nsubmission.to_csv(\"submission.csv\", index=False)\n\nprint(\"Submission file created!\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-13T06:08:58.945602Z","iopub.execute_input":"2025-08-13T06:08:58.946248Z","iopub.status.idle":"2025-08-13T06:15:14.789156Z","shell.execute_reply.started":"2025-08-13T06:08:58.946221Z","shell.execute_reply":"2025-08-13T06:15:14.788351Z"}},"outputs":[],"execution_count":null}]}